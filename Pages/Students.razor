@page "/students"

@using final.Data
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject final.IServices.IStudentService studentService
@inject MudBlazor.ISnackbar SnackBar

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h3">Students</MudText>
        <br />
        <MudCard Elevation="10">
            <MudGrid>
                <MudItem xs="4">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Add / Edit Student</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudForm @bind-IsValid="@success">
                            <MudTextField @bind-Value="student.FirstName" Label="First Name" Variant="Variant.Text" Margin="Margin.Dense" Required="true"
                                          RequiredError="First Name required!"></MudTextField>
                            <MudTextField @bind-Value="student.LastName" Label="Last Name" Variant="Variant.Text" Margin="Margin.Dense" Required="true"
                                          RequiredError="Last Name required!"></MudTextField>
                            <MudTextField @bind-Value="student.Email" Label="Email" Variant="Variant.Text" Margin="Margin.Dense" Required="true" InputType="InputType.Email"
                                          RequiredError="Email is required!" Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"></MudTextField>
                            <MudTextField @bind-Value="student.Address" Label="Address" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save" Disabled="@(!success)">Save</MudButton>
                        </MudForm>
                    </MudCardContent>
                </MudItem>
            </MudGrid>
        </MudCard>
        
        <hr />

        <MudTable Items="@GetStudents()" Dense="@dense" Hover="@hover" Filter="new Func<Student, bool>(FilterFunc)" @bind-student="student">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Periodic Students</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Student Id</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Student, object>(x => x.FirstName)" InitialDirection="SortDirection.Ascending">First Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Student, object>(x => x.LastName)" InitialDirection="SortDirection.Ascending">Last Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Student, object>(x => x.Email)" InitialDirection="SortDirection.Ascending">E-mail</MudTableSortLabel></MudTh>
                <MudTh>Address</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate Context="rowTemplateContext">
                <MudTd DataLabel="Id">@rowTemplateContext.Id</MudTd>
                <MudTd DataLabel="First Name">@rowTemplateContext.FirstName</MudTd>
                <MudTd DataLabel="Last Name">@rowTemplateContext.LastName</MudTd>
                <MudTd DataLabel="Email">@rowTemplateContext.Email</MudTd>
                <MudTd DataLabel="Address">@rowTemplateContext.Address</MudTd>
                <MudTd DataLabel="">
                    <MudFab @onclick="@(() => Edit(rowTemplateContext.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab @onclick="@(() => Delete(rowTemplateContext.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
        <MudText Inline="true">Selected: @student?.FirstName @student?.LastName</MudText>
    </Authorized>

    <NotAuthorized>
        <MudText Typo="Typo.h6">You are not authorized. Please Register or Log In to see the context of this page.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool success;

    private bool dense = false;
    private bool hover = true;
    private string searchString = "";

    private Student student = new Student();
    private List<Student> students = new List<Student>();

    protected override async Task OnInitializedAsync()
    {
        GetStudents();
    }

    private List<Student> GetStudents()
    {
        students = studentService.GetStudents();
        return students;
    }

    private bool FilterFunc(Student student)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }
        if (student.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        if (student.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        if (student.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void Save()
    {
        studentService.Save(student);
        student = new Student();
        SnackBar.Add("Student Saved", Severity.Success);
        GetStudents();
    }

    private void Edit(int id)
    {
        student = students.FirstOrDefault(s => s.Id == id);

    }

    private void Delete(int id)
    {
        studentService.Delete(id);
        SnackBar.Add("Student Deleted", Severity.Warning);
        GetStudents();
    }

}
